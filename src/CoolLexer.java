/* The following code was generated by JFlex 1.4.3 on 21/03/14 16.05 */

/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/03/14 16.05 from the specification file
 * <tt>C:/Users/Mattia/git/LXR2014/cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\7\22\0\1\2\7\0\1\21"+
    "\1\23\1\22\1\57\1\70\1\12\1\64\1\60\1\3\11\4\1\67"+
    "\1\66\1\61\1\62\1\73\1\0\1\65\1\30\1\10\1\24\1\46"+
    "\1\13\1\17\1\10\1\40\1\34\2\10\1\26\1\10\1\36\1\15"+
    "\1\51\1\10\1\42\1\32\1\44\1\55\1\50\1\53\3\10\4\0"+
    "\1\5\1\0\1\31\1\11\1\25\1\47\1\14\1\20\1\11\1\41"+
    "\1\35\2\11\1\27\1\11\1\37\1\16\1\52\1\11\1\43\1\33"+
    "\1\45\1\56\1\6\1\54\3\11\1\71\1\0\1\72\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\4\1\5\1\4\1\5\1\4\1\7\1\10\1\11"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\1\5\1\4"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\0\2\5\2\4\2\26\1\27\1\4"+
    "\1\27\2\5\2\4\2\5\2\4\1\30\1\31\1\5"+
    "\1\30\1\31\1\4\2\5\2\4\1\5\2\4\1\5"+
    "\1\4\1\5\1\4\1\32\1\33\1\34\1\0\2\5"+
    "\3\4\2\5\2\4\1\35\1\5\1\35\1\4\2\5"+
    "\2\4\1\36\1\37\1\36\1\37\1\5\2\4\1\5"+
    "\1\4\1\5\1\4\1\0\1\40\1\41\1\40\1\41"+
    "\1\4\1\5\1\42\1\4\1\42\2\43\2\5\2\4"+
    "\2\44\1\45\2\46\1\5\1\4\1\2\1\47\2\50"+
    "\2\5\2\4\2\51\1\5\1\52\1\4\1\52\1\5"+
    "\1\4\2\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\170\0\264\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\170\0\170"+
    "\0\170\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\170"+
    "\0\170\0\u0654\0\u0690\0\170\0\170\0\170\0\170\0\170"+
    "\0\170\0\170\0\170\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc"+
    "\0\u012c\0\360\0\u012c\0\u07f8\0\360\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u012c\0\u0a14\0\u0a50"+
    "\0\360\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\170\0\170"+
    "\0\170\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u012c\0\u0ff0\0\360\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u012c\0\u012c\0\360\0\360\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u012c"+
    "\0\u012c\0\360\0\360\0\u1338\0\u1374\0\u012c\0\u13b0\0\360"+
    "\0\u012c\0\360\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u012c\0\360"+
    "\0\360\0\u012c\0\360\0\u14dc\0\u1518\0\u06cc\0\360\0\u012c"+
    "\0\360\0\u1554\0\u1590\0\u15cc\0\u1608\0\u012c\0\360\0\u1644"+
    "\0\u012c\0\u1680\0\360\0\u16bc\0\u16f8\0\u012c\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\3\1\6\1\4\1\7"+
    "\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\7"+
    "\1\6\1\7\1\6\1\26\1\27\1\30\1\31\1\7"+
    "\1\6\1\7\1\6\1\32\1\33\1\7\1\6\1\7"+
    "\1\34\1\35\1\36\1\37\1\7\1\6\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\2\3\1\0\72\3\77\0\2\5\72\0"+
    "\4\6\1\0\2\6\1\0\6\6\3\0\33\6\20\0"+
    "\4\7\1\0\2\7\1\0\6\7\3\0\33\7\27\0"+
    "\1\54\64\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\2\7\2\55\2\7\2\56\23\7\20\0\4\6\1\0"+
    "\2\6\1\0\6\6\3\0\2\6\2\57\2\6\2\60"+
    "\23\6\20\0\4\7\1\0\2\7\1\0\4\7\2\61"+
    "\3\0\33\7\20\0\4\6\1\0\2\6\1\0\4\6"+
    "\2\62\3\0\33\6\20\0\4\7\1\0\2\7\1\0"+
    "\6\7\3\0\10\7\2\63\21\7\20\0\4\6\1\0"+
    "\2\6\1\0\6\6\3\0\4\6\2\64\2\6\2\65"+
    "\21\6\20\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\2\7\2\66\2\67\25\7\20\0\4\6\1\0\2\6"+
    "\1\0\6\6\3\0\2\6\2\70\2\71\25\6\20\0"+
    "\4\7\1\0\2\7\1\0\2\72\2\73\2\7\3\0"+
    "\33\7\20\0\4\6\1\0\2\6\1\0\2\74\2\75"+
    "\2\6\3\0\33\6\20\0\4\7\1\0\2\7\1\0"+
    "\4\7\2\76\3\0\12\7\2\77\6\7\2\100\7\7"+
    "\20\0\4\6\1\0\2\6\1\0\4\6\2\101\3\0"+
    "\12\6\2\102\6\6\2\103\7\6\20\0\4\7\1\0"+
    "\2\7\1\0\2\104\2\105\2\7\3\0\33\7\20\0"+
    "\4\6\1\0\2\6\1\0\2\106\2\107\2\6\3\0"+
    "\33\6\20\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\14\7\2\110\15\7\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\14\6\2\111\2\112\13\6\20\0\4\7"+
    "\1\0\2\7\1\0\2\7\2\113\2\7\3\0\33\7"+
    "\20\0\4\6\1\0\2\6\1\0\2\6\2\114\2\6"+
    "\3\0\33\6\20\0\4\7\1\0\2\7\1\0\6\7"+
    "\3\0\14\7\2\115\15\7\20\0\4\6\1\0\2\6"+
    "\1\0\6\6\3\0\14\6\2\116\15\6\27\0\1\117"+
    "\47\0\1\120\104\0\1\121\1\54\1\4\5\54\1\0"+
    "\3\54\2\122\57\54\3\0\4\7\1\0\2\7\1\0"+
    "\6\7\3\0\6\7\2\123\23\7\20\0\4\7\1\0"+
    "\2\7\1\0\6\7\3\0\4\7\2\124\25\7\20\0"+
    "\4\6\1\0\2\6\1\0\6\6\3\0\6\6\2\125"+
    "\23\6\20\0\4\6\1\0\2\6\1\0\6\6\3\0"+
    "\4\6\2\126\25\6\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\2\6\2\127\27\6\20\0\4\7\1\0"+
    "\2\7\1\0\6\7\3\0\4\7\2\130\25\7\20\0"+
    "\4\7\1\0\2\7\1\0\6\7\3\0\6\7\2\131"+
    "\23\7\20\0\4\6\1\0\2\6\1\0\6\6\3\0"+
    "\4\6\2\132\25\6\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\6\6\2\133\23\6\20\0\4\7\1\0"+
    "\2\7\1\0\6\7\3\0\20\7\2\134\11\7\20\0"+
    "\4\7\1\0\2\7\1\0\2\7\2\135\2\7\3\0"+
    "\33\7\20\0\4\6\1\0\2\6\1\0\6\6\3\0"+
    "\20\6\2\136\11\6\20\0\4\6\1\0\2\6\1\0"+
    "\2\6\2\137\2\6\3\0\33\6\20\0\4\7\1\0"+
    "\2\7\1\0\6\7\3\0\14\7\2\140\15\7\20\0"+
    "\3\7\1\141\1\0\2\7\1\0\6\7\3\0\24\7"+
    "\1\141\6\7\20\0\4\6\1\0\2\6\1\0\6\6"+
    "\3\0\14\6\2\142\15\6\20\0\3\6\1\143\1\0"+
    "\2\6\1\0\6\6\3\0\24\6\1\143\6\6\20\0"+
    "\4\7\1\0\2\7\1\0\6\7\3\0\27\7\2\144"+
    "\2\7\20\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\20\7\2\145\11\7\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\27\6\2\146\2\6\20\0\4\6\1\0"+
    "\2\6\1\0\6\6\3\0\20\6\2\147\11\6\20\0"+
    "\4\7\1\0\2\7\1\0\2\150\4\7\3\0\33\7"+
    "\20\0\4\6\1\0\2\6\1\0\2\151\4\6\3\0"+
    "\33\6\20\0\4\6\1\0\2\6\1\0\6\6\3\0"+
    "\31\6\2\152\20\0\4\7\1\0\2\7\1\0\2\7"+
    "\2\153\2\7\3\0\33\7\20\0\4\6\1\0\2\6"+
    "\1\0\2\6\2\154\2\6\3\0\33\6\20\0\4\7"+
    "\1\0\2\7\1\0\6\7\3\0\10\7\2\155\21\7"+
    "\20\0\4\6\1\0\2\6\1\0\6\6\3\0\10\6"+
    "\2\156\21\6\15\0\1\54\1\4\5\54\1\0\3\54"+
    "\2\122\2\157\55\54\3\0\4\7\1\0\2\7\1\0"+
    "\2\160\4\7\3\0\33\7\20\0\4\7\1\0\2\7"+
    "\1\0\6\7\3\0\2\161\31\7\20\0\4\6\1\0"+
    "\2\6\1\0\2\162\4\6\3\0\33\6\20\0\4\6"+
    "\1\0\2\6\1\0\6\6\3\0\2\163\31\6\20\0"+
    "\4\6\1\0\2\6\1\0\6\6\3\0\6\6\2\164"+
    "\23\6\20\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\6\7\2\165\23\7\20\0\4\7\1\0\2\7\1\0"+
    "\2\166\4\7\3\0\33\7\20\0\4\6\1\0\2\6"+
    "\1\0\6\6\3\0\6\6\2\167\23\6\20\0\4\6"+
    "\1\0\2\6\1\0\2\170\4\6\3\0\33\6\20\0"+
    "\4\7\1\0\2\7\1\0\6\7\3\0\25\7\2\171"+
    "\4\7\20\0\4\6\1\0\2\6\1\0\6\6\3\0"+
    "\25\6\2\172\4\6\20\0\4\7\1\0\2\7\1\0"+
    "\2\173\4\7\3\0\33\7\20\0\4\7\1\0\2\7"+
    "\1\0\2\7\2\174\2\7\3\0\33\7\20\0\4\6"+
    "\1\0\2\6\1\0\2\175\4\6\3\0\33\6\20\0"+
    "\4\6\1\0\2\6\1\0\2\6\2\176\2\6\3\0"+
    "\33\6\20\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\12\7\2\177\17\7\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\12\6\2\200\17\6\20\0\4\6\1\0"+
    "\2\6\1\0\2\201\4\6\3\0\33\6\20\0\4\7"+
    "\1\0\2\7\1\0\6\7\3\0\2\7\2\202\27\7"+
    "\20\0\4\6\1\0\2\6\1\0\6\6\3\0\2\6"+
    "\2\203\27\6\20\0\4\7\1\0\2\7\1\0\6\7"+
    "\3\0\2\7\2\204\27\7\20\0\4\6\1\0\2\6"+
    "\1\0\6\6\3\0\2\6\2\205\27\6\15\0\1\54"+
    "\1\4\5\54\1\0\3\54\2\122\2\54\2\206\53\54"+
    "\3\0\4\6\1\0\2\6\1\0\2\207\4\6\3\0"+
    "\33\6\20\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\6\7\2\210\23\7\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\6\6\2\211\23\6\20\0\4\7\1\0"+
    "\2\7\1\0\6\7\3\0\16\7\2\212\13\7\20\0"+
    "\4\7\1\0\2\7\1\0\6\7\3\0\10\7\2\213"+
    "\21\7\20\0\4\6\1\0\2\6\1\0\6\6\3\0"+
    "\16\6\2\214\13\6\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\10\6\2\215\21\6\20\0\4\7\1\0"+
    "\2\7\1\0\2\216\4\7\3\0\33\7\20\0\4\6"+
    "\1\0\2\6\1\0\2\217\4\6\3\0\33\6\20\0"+
    "\4\7\1\0\2\7\1\0\6\7\3\0\10\7\2\220"+
    "\21\7\20\0\4\7\1\0\2\7\1\0\6\7\3\0"+
    "\22\7\2\221\7\7\20\0\4\6\1\0\2\6\1\0"+
    "\6\6\3\0\10\6\2\222\21\6\20\0\4\6\1\0"+
    "\2\6\1\0\6\6\3\0\22\6\2\223\7\6\20\0"+
    "\4\7\1\0\2\7\1\0\6\7\3\0\20\7\2\224"+
    "\11\7\20\0\4\6\1\0\2\6\1\0\6\6\3\0"+
    "\20\6\2\225\11\6\20\0\4\7\1\0\2\7\1\0"+
    "\6\7\3\0\6\7\2\226\23\7\20\0\4\6\1\0"+
    "\2\6\1\0\6\6\3\0\6\6\2\227\23\6\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5940];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\12\1\3\11\16\1\2\11\2\1\10\11"+
    "\1\0\42\1\3\11\1\0\34\1\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */

    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    //private int curr_lineno = 1;
    int get_curr_lineno() {
	//return curr_lineno;
    	return yyline;
    }

    int get_curr_column() {
    	return yycolumn;
    }
    
    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
  
/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return new Symbol(TokenConstants.LBRACE);
          }
        case 44: break;
        case 39: 
          { return new Symbol(TokenConstants.BOOL_CONST, false);
          }
        case 45: break;
        case 26: 
          { return new Symbol(TokenConstants.ASSIGN);
          }
        case 46: break;
        case 5: 
          { return new Symbol(TokenConstants.TYPEID);
          }
        case 47: break;
        case 14: 
          { return new Symbol(TokenConstants.NEG);
          }
        case 48: break;
        case 24: 
          { return new Symbol(TokenConstants.IF);
          }
        case 49: break;
        case 29: 
          { return new Symbol(TokenConstants.LET);
          }
        case 50: break;
        case 2: 
          { /* ignore this */
          }
        case 51: break;
        case 4: 
          { return new Symbol(TokenConstants.OBJECTID);
          }
        case 52: break;
        case 25: 
          { return new Symbol(TokenConstants.IN);
          }
        case 53: break;
        case 13: 
          { return new Symbol(TokenConstants.EQ);
          }
        case 54: break;
        case 16: 
          { return new Symbol(TokenConstants.AT);
          }
        case 55: break;
        case 30: 
          { return new Symbol(TokenConstants.NEW);
          }
        case 56: break;
        case 18: 
          { return new Symbol(TokenConstants.COLON);
          }
        case 57: break;
        case 10: 
          { return new Symbol(TokenConstants.PLUS);
          }
        case 58: break;
        case 35: 
          { return new Symbol(TokenConstants.LOOP);
          }
        case 59: break;
        case 7: 
          { return new Symbol(TokenConstants.LPAREN);
          }
        case 60: break;
        case 33: 
          { return new Symbol(TokenConstants.ESAC);
          }
        case 61: break;
        case 41: 
          { return new Symbol(TokenConstants.WHILE);
          }
        case 62: break;
        case 34: 
          { return new Symbol(TokenConstants.CASE);
          }
        case 63: break;
        case 37: 
          { return new Symbol(TokenConstants.BOOL_CONST, true);
          }
        case 64: break;
        case 43: 
          { return new Symbol(TokenConstants.INHERITS);
          }
        case 65: break;
        case 21: 
          { return new Symbol(TokenConstants.RBRACE);
          }
        case 66: break;
        case 32: 
          { return new Symbol(TokenConstants.ELSE);
          }
        case 67: break;
        case 15: 
          { return new Symbol(TokenConstants.DOT);
          }
        case 68: break;
        case 36: 
          { return new Symbol(TokenConstants.THEN);
          }
        case 69: break;
        case 27: 
          { return new Symbol(TokenConstants.LE);
          }
        case 70: break;
        case 8: 
          { return new Symbol(TokenConstants.MULT);
          }
        case 71: break;
        case 28: 
          { return new Symbol(TokenConstants.DARROW);
          }
        case 72: break;
        case 1: 
          { /* This rule should be the very last
                                     in your lexical specification and
                                     will match match everything not
                                     matched by other lexical rules. */
                                  System.err.println("LEXER BUG - UNMATCHED: " + yytext());
          }
        case 73: break;
        case 23: 
          { return new Symbol(TokenConstants.FI);
          }
        case 74: break;
        case 6: 
          { return new Symbol(TokenConstants.MINUS);
          }
        case 75: break;
        case 42: 
          { return new Symbol(TokenConstants.ISVOID);
          }
        case 76: break;
        case 22: 
          { return new Symbol(TokenConstants.OF);
          }
        case 77: break;
        case 3: 
          { return new Symbol(TokenConstants.INT_CONST);
          }
        case 78: break;
        case 17: 
          { return new Symbol(TokenConstants.SEMI);
          }
        case 79: break;
        case 31: 
          { return new Symbol(TokenConstants.NOT);
          }
        case 80: break;
        case 19: 
          { return new Symbol(TokenConstants.COMMA);
          }
        case 81: break;
        case 11: 
          { return new Symbol(TokenConstants.DIV);
          }
        case 82: break;
        case 12: 
          { return new Symbol(TokenConstants.LT);
          }
        case 83: break;
        case 40: 
          { return new Symbol(TokenConstants.CLASS);
          }
        case 84: break;
        case 38: 
          { return new Symbol(TokenConstants.POOL);
          }
        case 85: break;
        case 9: 
          { return new Symbol(TokenConstants.RPAREN);
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 
/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */

    switch(yystate()) {
    case COMMENT:
	
	break;
    case YYINITIAL:
		/* nothing special to do in the initial state */
	break;
	case STRING:
		
	break;
	}
    return new Symbol(TokenConstants.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
